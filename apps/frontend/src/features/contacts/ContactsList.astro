---
import ContactItem from "./ContactItem.astro";
---

<ul id="contacts-list" class="m-0 p-2 list-none overflow-auto flex flex-col gap-8 rounded-md border border-gray-300 h-full md:w-[70%] lg:w-[50%]">
  <template id="contact-item-template">
    <ContactItem 
      name="Perro Perro"
      phone="04122110101"
      id={0}
    />
  </template>
</ul>

<script>
  // @ts-nocheck
  import ky from "ky";
  import { BACK_ENDPOINT } from "../../config/endpoints";
  import ContactsModule, { contacts } from "./contacts.module";
  const contactsList = document.querySelector('#contacts-list');
  const contactItemTemplate = document.querySelector('#contact-item-template');
  await ContactsModule.getContacts();
  contacts.subscribe(contacts => {    
    // Reiniciamos el estado de la lista
    contactsList.innerHTML = '';
    for (const contact of contacts) {
      // Clonamos el componente del li
      const contactItem = contactItemTemplate.content.cloneNode(true).children[0];
      // Seleccionamos los inputs a reemplazar
      const inputName = contactItem.children[0].children[0];
      const inputPhone = contactItem.children[0].children[1];
      // Editamos el li
      contactItem.id = contact.id;
      inputName.value = contact.name;
      inputPhone.value = contact.phone;
      // Adjuntamos el nuevo li a la lista      
      contactsList.append(contactItem);
    }
  });
  contactsList.addEventListener('click', async e => {
    const deleteBtn = e.target.closest('.delete-btn');
    const editBtn = e.target.closest('.edit-btn');
  
    if (deleteBtn) {
      // 1. Encuentro el li
      const li = deleteBtn.parentElement.parentElement;
      // 2. Actualizo el array en js, usando el metodo filter para devolver todos los contactos excepto el que quiero eliminar.
      await ContactsModule.removeContact(li.id);
    }

    if (editBtn) {
      // 1. Encuentro el li
      const li = editBtn.parentElement.parentElement;
      // 2. Obtener el status
      const status = li.dataset.status;
      // 3. Obtener los inputs
      const contactInputName = li.children[0].children[0];
      const contactInputPhone = li.children[0].children[1];
      // 4. Obtener el boton
      const contactEditBtn = li.children[1].children[0];
      if (status === 'inputs-deshabilitados') {
        // 1. Remover el readonly (No se puede editar) de los inputs.
        contactInputName.removeAttribute('readonly');
        contactInputPhone.removeAttribute('readonly');
        // 2. Cambiar el status a inputs-habilitados
        li.dataset.status = 'inputs-habilitados';
        // 3. Cambiar icono del boton para reflejar el estado
        contactEditBtn.children[0].classList.add('hidden');
        contactEditBtn.children[1].classList.remove('hidden');
        // 4. Cambiar estilos de los inputs para reflejar el estado
      }

      if (status === 'inputs-habilitados') {
        // 1. Agegar el readonly (No se puede editar) de los inputs.
        contactInputName.setAttribute('readonly', true);
        contactInputPhone.setAttribute('readonly', true);
        // 2. Cambiar el status a inputs-deshabilitados
        li.dataset.status = 'inputs-deshabilitados';
        // 3. Cambiar icono del boton para reflejar el estado
        contactEditBtn.children[0].classList.remove('hidden');
        contactEditBtn.children[1].classList.add('hidden');
        // 4. Actualizar el contacto
        const contactToUpdate = {
          id: li.id,
          name: contactInputName.value,
          phone: contactInputPhone.value
        }
        await ContactsModule.updateContact(contactToUpdate);
      }
    }
  });
</script>